physical_device<-instance
physical_device{
physical_device = select_physical_device(instance);
}
queue_family_index<-physical_device
queue_family_index{
auto queue_family_index = select_queue_family(physical_device);
}
device<-physical_device
device<-device_create_info
device{
device = vk::SharedDevice{physical_device.createDevice(device_create_info.get<vk::DeviceCreateInfo>()), physical_device};
}
device_create_info<-deviceQueueCreateInfo
device_create_info<-device_extensions
device_create_info{
vk::StructureChain device_create_info{
    vk::DeviceCreateInfo{}
    .setQueueCreateInfos(deviceQueueCreateInfo)
    .setPEnabledExtensionNames(device_extensions),
    vk::PhysicalDeviceFeatures2{},
    vk::PhysicalDeviceMeshShaderFeaturesEXT{}.setMeshShader(true).setTaskShader(true),
    vk::PhysicalDeviceMaintenance4Features{}.setMaintenance4(true),
    vk::PhysicalDeviceSynchronization2Features{}.setSynchronization2(true),
};
}
deviceQueueCreateInfo<-queue_family_index
deviceQueueCreateInfo<-queuePriority
deviceQueueCreateInfo{
auto deviceQueueCreateInfo = vk::DeviceQueueCreateInfo{}.setQueueFamilyIndex(queue_family_index).setQueuePriorities(queuePriority);
}
queuePriority{
float queuePriority = 0.0f;
}
device_extensions<-deviceExtensions
device_extensions{
std::vector<const char*> device_extensions(deviceExtensions.size());
std::ranges::transform(
    deviceExtensions,
    device_extensions.begin(),
    [](auto& ext) { return ext.data();  });
}
deviceExtensions{
std::array<std::string, 1> deviceExtensions{
    "VK_KHR_swapchain",
};
}
queue<-device
queue<-queue_family_index
queue{
queue = get_queue(device, queue_family_index);
}
command_pool<-device
command_pool<-queue_family_index
command_pool{
command_pool = create_command_pool(device, queue_family_index);
}
surface<-instance
surface<-get_surface_from_extern
surface{
vk::SharedSurfaceKHR surface = get_surface(instance, get_surface_from_extern);
}
color_format<-physical_device
color_format<-surface
color_format{
vk::Format color_format = select_color_format(physical_device, surface);
}
depth_format{
vk::Format depth_format = select_depth_format();
}
surface_capabilities<-physical_device
surface_capabilities<-surface
surface_capabilities{
auto surface_capabilities = get_surface_capabilities(physical_device, surface);
}
swapchain<-physical_device
swapchain<-device
swapchain<-surface
swapchain<-surface_capabilities
swapchain<-color_format
swapchain{
swapchain = create_swapchain(physical_device, device, surface, surface_capabilities, color_format);
}
swapchain_extent<-surface_capabilities
swapchain_extent{
swapchain_extent = get_surface_extent(surface_capabilities);
}
swapchainImages<-device
swapchainImages<-swapchain
swapchainImages{
auto swapchainImages = device->getSwapchainImagesKHR(*swapchain);
}
per_swapchain_image_resource<-swapchainImages
per_swapchain_image_resource<-color_format
per_swapchain_image_resource<-depth_format
per_swapchain_image_resource{
create_per_swapchain_image_resources(swapchainImages, color_format, depth_format);
}
imageViews<-swapchainImages
swapchain_image_count<-swapchainImages
render_complete_semaphores<-swapchain_image_count
render_pass<-device
render_pass<-color_format
render_pass<-depth_format
render_pass{
render_pass = create_render_pass(device, color_format, depth_format);
}
descriptor_set_bindings{
auto descriptor_set_bindings = create_descriptor_set_bindings();
}
descriptor_set_layout<-descriptor_set_bindings
descriptor_set_layout<-device
descriptor_set_layout{
descriptor_set_layout = create_descriptor_set_layout(device, descriptor_set_bindings);
}
pipeline_layout<-device
pipeline_layout<-descriptor_set_layout
pipeline_layout{
pipeline_layout = create_pipeline_layout(device, descriptor_set_layout);
}
descriptor_pool_size{
auto descriptor_pool_size = get_descriptor_pool_size();
}
descriptor_pool<-device
descriptor_pool<-descriptor_pool_size
descriptor_pool{
descriptor_pool = create_descriptor_pool(device, descriptor_pool_size);
}
descriptor_set<-device
descriptor_set<-descriptor_set_layout
descriptor_set{
descriptor_set = allocate_descriptor_set(device, descriptor_set_layout);
}
sampler<-device
sampler{
sampler = device->createSamplerUnique(vk::SamplerCreateInfo());
}
terminal_buffer_relate_data<-descriptor_set
terminal_buffer_relate_data<-sampler
terminal_buffer_relate_data<-terminal_buffer
terminal_buffer_relate_data<-imageViews
terminal_buffer_relate_data{
create_and_update_terminal_buffer_relate_data(
    descriptor_set, sampler, terminal_buffer, imageViews);
}
p_terminal_buffer<-terminal_buffer
p_terminal_buffer{
p_terminal_buffer = &terminal_buffer;
}
