instance_extensions{
auto instance_extensions = get_required_instance_extensions();
}
application_info{
auto application_info = vk::ApplicationInfo{"Terminal Emulator", 1, nullptr, 0, VK_API_VERSION_1_3};
}
instance_layers{
auto instance_layers = std::array<const char*, 0>{};
}
instance_extensions_vk<-instance_extensions
instance_extensions_vk{
std::vector<const char*> instance_extensions_vk(instance_extensions.size());
std::ranges::transform(instance_extensions, instance_extensions_vk.begin(),
[](auto& str) {
    return str.c_str();
});
}
instance_create_info<-application_info
instance_create_info<-instance_layers
instance_create_info<-instance_extensions_vk
instance_create_info{
auto instance_create_info = vk::InstanceCreateInfo{{}, &application_info,
    instance_layers, instance_extensions_vk};
}
instance<-instance_create_info
instance{
auto instance = vk::SharedInstance{ vk::createInstance(instance_create_info) };
}
